{% extends 'Base/Views/base.html.twig' %}

{% block title %}
    {{ 'dashboard.title'|trans }}
{% endblock %}

{% block description %}
    {{ 'dashboard.description'|trans }}
{% endblock %}

{% block content %}
    <div class="modal fade" id="newWidgetModal">
        <div class="modal-dialog">
            <div class="modal-content" id="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">{{ 'dashboard.modal.add'|trans }}</h4>
                </div>
                <div id="modal-content-ajax"></div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div><!-- /.modal -->
    
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-10 col-sm-offset-1">
                <div class="row" id="dashboard-menu-bar" style="display: none;">
                    <div class="btn-group">
                    <button type="button" class="btn btn-default" onclick="yaff.dashboard.createModalWidgetGraph()" data-toggle="modal" data-target="#newWidgetModal"><span class="glyphicon glyphicon-plus"></span> {{ 'dashboard.modal.add'|trans }}</button>
                    </div>
                    <hr>
                </div>
                {% set counter = 0 %}
                {% for i in 1..config.rows %}
                    {% if widgets[counter] is defined %}
                        <div class="row">
                            {% for j in 1..config.columns %}                                
                                {% if widgets[counter] is defined %}
                                    <div class="col-sm-{{ 12 / config.columns }}">
                                        <div class="panel panel-primary">                                
                                            <div class="panel-heading">
                                                {{ widgets[counter].title }}
                                                <div class="widget-menu-bar btn-group" style="float: right; display:none;">
                                                    <button type="button" class="btn btn-default btn-xs" aria-label="Left Align" onclick="return yaff.dashboard.moveWidget({{ widgets[counter].id }}, 'left')" {% if i == 1 %} style="display: none;" {% endif %}>
                                                        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                                                    </button>
                                                    <button type="button" class="btn btn-default btn-xs" aria-label="Center Align">
                                                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                                    </button>
                                                    <button type="button" class="btn btn-default btn-xs" aria-label="Center Align" onclick="return yaff.dashboard.deleteWidget({{ widgets[counter].id }})">
                                                        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                                    </button>
                                                    <button type="button" class="btn btn-default btn-xs" aria-label="Right Align" onclick="return yaff.dashboard.moveWidget({{ widgets[counter].id }}, 'right')" {% if widgets[counter + 1] is not defined %} style="display: none;" {% endif %}>
                                                        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="panel-body">
                                                {% if widgets[counter].type == 1 %}
                                                    <div class="yaff-widget-graph" data-yaff-widget-device="{{ widgets[counter].device}}" data-yaff-widget-reading="{{ widgets[counter].reading}}" data-yaff-widget-interval="{{ widgets[counter].interval}}" style="height: 200px"><img src="{{ app.request.basepath }}/resources/images/ajax-loader.gif" /></div>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </div>
                                    {% set counter = counter + 1 %}
                                {% endif %}
                            {% endfor %} 
                        </div>
                    {% endif %}
                {% endfor %}  
            </div>
        </div>
        <div class="row">
            <div class="col-sm-10 col-sm-offset-1">
                <a href="#" id="button-toggle-edit" onclick="return yaff.dashboard.switchEditMode()">{{ 'dashboard.edit.mode.off'|trans }}</a>
            </div>
        </div>
    </div>
    <div id='tooltip'></div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        yaff.dashboard = {
            /**
             * Fetches the content for the create a graph widget and sets onchange event functions
             */
            createModalWidgetGraph: function() {
                var idModal = '#modal-content-ajax';
                yaff.util.setContentModalLoading(idModal);
                $(idModal).load('{{ path('yaff.dashboard.create.widget.graph') }}', function() {
                    $('#device').change(yaff.dashboard.createOptionsReadings);
                    $('#reading').change(yaff.dashboard.getCurrentReadingValue);
                    yaff.dashboard.createOptionsReadings();
                });
            },

            /**
             * Formats the data and draws the graph at the given widget
             * @param {array} values
             * @param {jQuery} widget
             */
            drawWidgetGraph: function(values, widget) {            
                var chartData = [];
                var minValue;
                var maxValue;
                for(i = 0; i < values.data.length; i++) {
                    var tempValue = parseFloat(values.data[i]["VALUE"]);
                    chartData.push([new Date(values.data[i].TIMESTAMP.replace(" ", "T") + "+01:00").getTime(), tempValue]);
                    if(i == 0) {
                        minValue = tempValue;
                        maxValue = tempValue;
                    } else {
                        if(tempValue < minValue) minValue = tempValue;
                        if(tempValue > maxValue) maxValue = tempValue;
                    }
                }
                $.plot(widget, [chartData], {
                    series: {
                        lines: {
                            show: true
                        },
                        points: {
                            show: false
                        }
                    },
                    grid: {
                        hoverable: true,
                        clickable: true
                    },
                    yaxis: {
                        max: maxValue + 2,
                        min: minValue - 2
                    },
                    xaxis: {
                        mode: "time",
                        timezone: "browser",
                        min: (chartData[0][0]),
                        max: (chartData[chartData.length - 1][0])
                    }
                });
                $("#tooltip").css({
                    position: "absolute",
                    display: "none",
                    border: "1px solid #fdd",
                    padding: "2px",
                    "background-color": "#fee",
                    opacity: 0.80
                }).appendTo("body");
                widget.bind("plothover", function (event, pos, item) {
                    if(item != null) {
                        $("#tooltip").html(new Date(item.datapoint[0]) + ": " + item.datapoint[1])
                                .css({top: item.pageY+5, left: item.pageX+5})
                                .fadeIn(200);
                    } else {
                        $("#tooltip").hide();
                    }
                });                
            },

            /**
             * Searches for graph widgets, fetches the information from FHEM and starts drawing the graph
             */
            createWidgetGraphs: function() {
                var graphWidgets = $('.yaff-widget-graph');
                for(var i = 0; i < graphWidgets.length; i++) {
                    var widget = $(graphWidgets[i]);
                    var device = widget.data('yaffWidgetDevice');
                    var reading = widget.data('yaffWidgetReading');
                    var interval = widget.data('yaffWidgetInterval');
                    var url = "{{ path('yaff.fhem.getValues', {device: 'devicePlaceholder', type: 'readingPlaceholder'}) }}";
                    url = url.replace('devicePlaceholder', device);
                    url = url.replace('readingPlaceholder', reading);

                    // saves the current widget in the loop an passes it to the drawWidgetGraph method
                    (function(widget) {
                        $.get(url, function(values) {
                            yaff.dashboard.drawWidgetGraph(values, widget);
                        });
                    })(widget);
                }
            },

            /**
             * Toggles the edit mode of the widgets
             */
            switchEditMode: function() {
                var widgetMenuBars = $('.widget-menu-bar');
                var menubar = $('#dashboard-menu-bar');
                var buttonToggleEdit = $('#button-toggle-edit');
                if(menubar.is(':visible')) {
                    for(var i = 0; i < widgetMenuBars.length; i++) {
                        $(widgetMenuBars[i]).hide();
                    }
                    buttonToggleEdit.html('{{ 'dashboard.edit.mode.off'|trans }}');
                    menubar.hide();
                } else {
                    for(var i = 0; i < widgetMenuBars.length; i++) {
                        $(widgetMenuBars[i]).show();
                    }
                    buttonToggleEdit.html('{{ 'dashboard.edit.mode.on'|trans }}');
                    menubar.show();
                }
            },
            
            /**
             * Starts the delete request for the widget with the passed id and reloads the page
             * @param {type} id the widget id
             */
            deleteWidget: function(id) {
                var url = "{{ path('yaff.dashboard.delete.widget', {id: 'placeholder'}) }}";
                url = url.replace('placeholder', id);
                $.get(url, function() {
                    location.reload();
                });
            },
            
            /**
             * Starts the move widget request for the widget with the given id and the given direction and reloads the page
             * @param id the widget id
             * @param direction the direction 'left' or 'right'
             */
            moveWidget: function(id, direction) {
                var url = "{{ path('yaff.dashboard.move.widget', {id: 'placeholderId', direction: 'placeholderDirection'}) }}";
                url = url.replace('placeholderId', id);
                url = url.replace('placeholderDirection', direction);
                $.get(url, function() {
                    location.reload();
                }).fail(function(data) {
                    location.reload();
                    yaff.util.log("Error: " + data); 
                });
            }
        }
        $(document).ready(yaff.dashboard.createWidgetGraphs);
    </script>
{% endblock %}